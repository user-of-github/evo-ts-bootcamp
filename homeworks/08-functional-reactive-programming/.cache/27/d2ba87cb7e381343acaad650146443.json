{"id":"../node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\switchMapTo.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\operators\\switchMapTo.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621875871998},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"./switchMap","loc":{"line":1,"column":26},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\switchMapTo.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\switchMap.js"},{"name":"../util/isFunction","loc":{"line":2,"column":27},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\switchMapTo.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\isFunction.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchMapTo = switchMapTo;\n\nvar _switchMap = require(\"./switchMap\");\n\nvar _isFunction = require(\"../util/isFunction\");\n\nfunction switchMapTo(innerObservable, resultSelector) {\n  return (0, _isFunction.isFunction)(resultSelector) ? (0, _switchMap.switchMap)(function () {\n    return innerObservable;\n  }, resultSelector) : (0, _switchMap.switchMap)(function () {\n    return innerObservable;\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":58,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":58,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":58,"column":6},"generated":{"line":12,"column":20}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":59,"column":2},"generated":{"line":12,"column":21}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":58,"column":6},"generated":{"line":12,"column":36}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":12,"column":38}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":58,"column":6},"generated":{"line":12,"column":52}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":60,"column":111},"generated":{"line":12,"column":54}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":13,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":20},"generated":{"line":13,"column":37}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":9},"generated":{"line":13,"column":51}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":38},"generated":{"line":13,"column":55}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":48},"generated":{"line":13,"column":81}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":48},"generated":{"line":13,"column":93}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":54},"generated":{"line":14,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":54},"generated":{"line":14,"column":11}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":54},"generated":{"line":14,"column":26}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":69},"generated":{"line":15,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":38},"generated":{"line":15,"column":3}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":71},"generated":{"line":15,"column":5}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":38},"generated":{"line":15,"column":19}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":9},"generated":{"line":15,"column":20}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":89},"generated":{"line":15,"column":23}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":99},"generated":{"line":15,"column":49}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":99},"generated":{"line":15,"column":61}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":105},"generated":{"line":16,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":105},"generated":{"line":16,"column":11}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":105},"generated":{"line":16,"column":26}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":120},"generated":{"line":17,"column":0}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":89},"generated":{"line":17,"column":3}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":17,"column":4}},{"source":"../../../../src/internal/operators/switchMapTo.ts","name":null,"original":{"line":63,"column":1},"generated":{"line":18,"column":0}}],"sources":{"../../../../src/internal/operators/switchMapTo.ts":"import { switchMap } from './switchMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<O extends ObservableInput<unknown>>(observable: O): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMapTo<O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: undefined\n): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMapTo<T, R, O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switchMap} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * ![](switchMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * ## Example\n * Rerun an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMapTo(interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMapTo}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @return A function that returns an Observable that emits items from the\n * given `innerObservable` (and optionally transformed through the deprecated\n * `resultSelector`) every time a value is emitted on the source Observable,\n * and taking only the values from the most recently projected inner\n * Observable.\n */\nexport function switchMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? switchMap(() => innerObservable, resultSelector) : switchMap(() => innerObservable);\n}\n"},"lineCount":null}},"error":null,"hash":"19717bfabba87af7461a2e6212509402","cacheData":{"env":{}}}