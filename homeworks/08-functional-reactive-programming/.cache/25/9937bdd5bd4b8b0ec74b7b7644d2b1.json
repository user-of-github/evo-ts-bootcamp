{"id":"nSjD","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\observable\\concat.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../operators/concatAll","loc":{"line":1,"column":26},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatAll.js"},{"name":"./fromArray","loc":{"line":2,"column":34},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\fromArray.js"},{"name":"../util/args","loc":{"line":3,"column":29},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\concat.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\args.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.concat=o;var r=require(\"../operators/concatAll\"),e=require(\"./fromArray\"),t=require(\"../util/args\");function o(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];return(0,r.concatAll)()((0,e.internalFromArray)(o,(0,t.popScheduler)(o)))}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":117,"column":1},"generated":{"line":1,"column":83}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":85}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":99}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":125}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":127}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":135}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":150}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":152}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":160}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":6},"generated":{"line":1,"column":176}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":16},"generated":{"line":1,"column":185}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":189}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":193}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":197}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":199}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":202}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":204}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":206}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":208}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":218}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":225}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":229}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":231}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":234}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":115,"column":23},"generated":{"line":1,"column":244}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":9},"generated":{"line":1,"column":247}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":9},"generated":{"line":1,"column":254}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":21},"generated":{"line":1,"column":256}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":21},"generated":{"line":1,"column":258}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":9},"generated":{"line":1,"column":270}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":21},"generated":{"line":1,"column":272}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":39},"generated":{"line":1,"column":274}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":39},"generated":{"line":1,"column":276}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":39},"generated":{"line":1,"column":295}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":45},"generated":{"line":1,"column":298}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":58},"generated":{"line":1,"column":300}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":58},"generated":{"line":1,"column":302}},{"source":"../../../../src/internal/observable/concat.ts","name":null,"original":{"line":116,"column":58},"generated":{"line":1,"column":316}}],"sources":{"../../../../src/internal/observable/concat.ts":"import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { internalFromArray } from './fromArray';\nimport { popScheduler } from '../util/args';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```ts\n * import { concat, interval, range } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate 3 Observables\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param input1 An input Observable to concatenate with others.\n * @param input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param scheduler An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(internalFromArray(args, popScheduler(args)));\n}\n"},"lineCount":null}},"error":null,"hash":"e0cc78b773b2f829d8f277ba9a35e160","cacheData":{"env":{}}}