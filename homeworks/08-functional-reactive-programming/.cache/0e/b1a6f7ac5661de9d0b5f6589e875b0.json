{"id":"IFp1","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\filter.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\operators\\filter.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../util/lift","loc":{"line":1,"column":24},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\filter.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"},{"name":"./OperatorSubscriber","loc":{"line":2,"column":35},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\filter.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\OperatorSubscriber.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.filter=t;var e=require(\"../util/lift\"),r=require(\"./OperatorSubscriber\");function t(t,u){return(0,e.operate)(function(e,i){var n=0;e.subscribe(new r.OperatorSubscriber(i,function(e){return t.call(u,e,n++)&&i.next(e)}))})}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":1,"column":83}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":85}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":99}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":115}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":117}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":125}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":56,"column":6},"generated":{"line":1,"column":149}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":56,"column":16},"generated":{"line":1,"column":158}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":56,"column":26},"generated":{"line":1,"column":160}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":56,"column":75},"generated":{"line":1,"column":162}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":9},"generated":{"line":1,"column":165}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":9},"generated":{"line":1,"column":172}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":1,"column":174}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":1,"column":176}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":17},"generated":{"line":1,"column":185}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":18},"generated":{"line":1,"column":194}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":57,"column":26},"generated":{"line":1,"column":196}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":59,"column":8},"generated":{"line":1,"column":199}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":59,"column":8},"generated":{"line":1,"column":203}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":59,"column":16},"generated":{"line":1,"column":205}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":63,"column":4},"generated":{"line":1,"column":207}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":63,"column":11},"generated":{"line":1,"column":209}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":6},"generated":{"line":1,"column":219}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":10},"generated":{"line":1,"column":223}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":6},"generated":{"line":1,"column":225}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":29},"generated":{"line":1,"column":244}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":41},"generated":{"line":1,"column":246}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":42},"generated":{"line":1,"column":255}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":52},"generated":{"line":1,"column":258}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":52},"generated":{"line":1,"column":265}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":62},"generated":{"line":1,"column":267}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":67},"generated":{"line":1,"column":272}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":76},"generated":{"line":1,"column":274}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":83},"generated":{"line":1,"column":276}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":95},"generated":{"line":1,"column":282}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":106},"generated":{"line":1,"column":284}},{"source":"../../../../src/internal/operators/filter.ts","name":null,"original":{"line":67,"column":111},"generated":{"line":1,"column":289}}],"sources":{"../../../../src/internal/operators/filter.ts":"import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      new OperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n"},"lineCount":null}},"error":null,"hash":"132c9bd5b237ae01fea0635d126296cb","cacheData":{"env":{}}}