{"id":"rerh","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\observable\\merge.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../operators/mergeAll","loc":{"line":1,"column":25},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js"},{"name":"./fromArray","loc":{"line":2,"column":34},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\fromArray.js"},{"name":"./from","loc":{"line":3,"column":26},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\from.js"},{"name":"./empty","loc":{"line":4,"column":22},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\empty.js"},{"name":"../util/args","loc":{"line":5,"column":40},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\args.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.merge=l;var r=require(\"../operators/mergeAll\"),e=require(\"./fromArray\"),t=require(\"./from\"),o=require(\"./empty\"),u=require(\"../util/args\");function l(){for(var l=[],i=0;i<arguments.length;i++)l[i]=arguments[i];var n=(0,u.popScheduler)(l),a=(0,u.popNumber)(l,1/0),m=l;return m.length?1===m.length?(0,t.innerFrom)(m[0]):(0,r.mergeAll)(a)((0,e.internalFromArray)(m,n)):o.EMPTY}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":1,"column":82}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":84}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":88}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":90}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":98}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":123}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":125}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":133}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":148}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":150}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":158}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":168}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":170}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":178}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":189}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":191}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":199}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":1,"column":215}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":16},"generated":{"line":1,"column":224}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":228}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":232}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":236}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":238}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":241}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":243}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":245}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":247}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":257}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":264}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":268}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":270}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":273}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":1,"column":283}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":8},"generated":{"line":1,"column":286}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":8},"generated":{"line":1,"column":290}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":20},"generated":{"line":1,"column":293}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":33},"generated":{"line":1,"column":295}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":33},"generated":{"line":1,"column":297}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":33},"generated":{"line":1,"column":311}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":1,"column":314}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":21},"generated":{"line":1,"column":317}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":31},"generated":{"line":1,"column":319}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":31},"generated":{"line":1,"column":321}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":31},"generated":{"line":1,"column":332}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":37},"generated":{"line":1,"column":334}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":37},"generated":{"line":1,"column":336}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":8},"generated":{"line":1,"column":339}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":18},"generated":{"line":1,"column":341}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":9},"generated":{"line":1,"column":343}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":10},"generated":{"line":1,"column":350}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":18},"generated":{"line":1,"column":352}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":25},"generated":{"line":1,"column":359}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":6},"generated":{"line":1,"column":363}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":14},"generated":{"line":1,"column":365}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":1,"column":373}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":1,"column":375}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":1,"column":377}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":1,"column":388}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":24},"generated":{"line":1,"column":390}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":1,"column":395}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":15},"generated":{"line":1,"column":397}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":15},"generated":{"line":1,"column":399}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":15},"generated":{"line":1,"column":409}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":1,"column":411}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":27},"generated":{"line":1,"column":413}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":45},"generated":{"line":1,"column":415}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":45},"generated":{"line":1,"column":417}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":45},"generated":{"line":1,"column":436}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":54},"generated":{"line":1,"column":438}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":93,"column":6},"generated":{"line":1,"column":442}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":9},"generated":{"line":1,"column":444}}],"sources":{"../../../../src/internal/observable/merge.ts":"import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { internalFromArray } from './fromArray';\nimport { innerFrom } from './from';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```ts\n * import { merge, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(internalFromArray(sources, scheduler));\n}\n"},"lineCount":null}},"error":null,"hash":"f89a1e34ebd199e1ce131bbbcaf90bbd","cacheData":{"env":{}}}