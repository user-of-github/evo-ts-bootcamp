{"id":"nBrU","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\config.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\config.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.config=void 0;var e={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1};exports.config=e;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":0}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":13}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":20}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":35}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":43}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":56}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":57}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":64}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":68}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":76}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":88}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":90}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":13},"generated":{"line":1,"column":94}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":1,"column":96}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":1,"column":97}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":9,"column":20},"generated":{"line":1,"column":114}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":10,"column":2},"generated":{"line":1,"column":119}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":10,"column":25},"generated":{"line":1,"column":141}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":11,"column":2},"generated":{"line":1,"column":146}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":1,"column":159}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":12,"column":2},"generated":{"line":1,"column":161}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":12,"column":41},"generated":{"line":1,"column":200}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":13,"column":2},"generated":{"line":1,"column":202}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":13,"column":28},"generated":{"line":1,"column":228}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":231}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":239}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":1,"column":246}}],"sources":{"../../../src/internal/config.ts":"import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n"},"lineCount":null}},"error":null,"hash":"0126b79d7a86b70f6253cb602eaf426a","cacheData":{"env":{}}}