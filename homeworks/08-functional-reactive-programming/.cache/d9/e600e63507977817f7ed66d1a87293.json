{"id":"WUVS","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\refCount.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\operators\\refCount.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../util/lift","loc":{"line":1,"column":24},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\refCount.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"},{"name":"./OperatorSubscriber","loc":{"line":2,"column":35},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\refCount.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\OperatorSubscriber.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.refCount=u;var e=require(\"../util/lift\"),r=require(\"./OperatorSubscriber\");function u(){return(0,e.operate)(function(e,u){var n=null;e._refCount++;var o=new r.OperatorSubscriber(u,void 0,void 0,void 0,function(){if(!e||e._refCount<=0||0<--e._refCount)n=null;else{var r=e._connection,o=n;n=null,!r||o&&r!==o||r.unsubscribe(),u.unsubscribe()}});e.subscribe(o),o.closed||(n=e.connect())})}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":120,"column":1},"generated":{"line":1,"column":85}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":101}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":117}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":119}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":127}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":66,"column":6},"generated":{"line":1,"column":151}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":66,"column":16},"generated":{"line":1,"column":160}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":164}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":9},"generated":{"line":1,"column":171}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":17},"generated":{"line":1,"column":173}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":17},"generated":{"line":1,"column":175}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":17},"generated":{"line":1,"column":184}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":18},"generated":{"line":1,"column":193}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":67,"column":26},"generated":{"line":1,"column":195}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":68,"column":8},"generated":{"line":1,"column":198}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":68,"column":8},"generated":{"line":1,"column":202}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":68,"column":42},"generated":{"line":1,"column":204}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":70,"column":5},"generated":{"line":1,"column":209}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":70,"column":20},"generated":{"line":1,"column":211}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":10},"generated":{"line":1,"column":223}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":10},"generated":{"line":1,"column":227}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":23},"generated":{"line":1,"column":229}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":27},"generated":{"line":1,"column":233}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":23},"generated":{"line":1,"column":235}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":46},"generated":{"line":1,"column":254}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":58},"generated":{"line":1,"column":261}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":69},"generated":{"line":1,"column":268}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":80},"generated":{"line":1,"column":275}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":72,"column":91},"generated":{"line":1,"column":277}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":10},"generated":{"line":1,"column":288}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":11},"generated":{"line":1,"column":292}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":22},"generated":{"line":1,"column":295}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":37},"generated":{"line":1,"column":297}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":50},"generated":{"line":1,"column":308}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":55},"generated":{"line":1,"column":311}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":62},"generated":{"line":1,"column":315}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":77},"generated":{"line":1,"column":317}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":74,"column":8},"generated":{"line":1,"column":327}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":74,"column":21},"generated":{"line":1,"column":329}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":73,"column":10},"generated":{"line":1,"column":338}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":103,"column":12},"generated":{"line":1,"column":339}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":103,"column":12},"generated":{"line":1,"column":343}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":103,"column":32},"generated":{"line":1,"column":345}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":103,"column":47},"generated":{"line":1,"column":347}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":104,"column":12},"generated":{"line":1,"column":359}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":104,"column":19},"generated":{"line":1,"column":361}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":105,"column":6},"generated":{"line":1,"column":363}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":105,"column":19},"generated":{"line":1,"column":365}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":107,"column":10},"generated":{"line":1,"column":371}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":107,"column":32},"generated":{"line":1,"column":374}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":107,"column":40},"generated":{"line":1,"column":377}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":107,"column":61},"generated":{"line":1,"column":381}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":108,"column":8},"generated":{"line":1,"column":384}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":108,"column":25},"generated":{"line":1,"column":386}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":111,"column":6},"generated":{"line":1,"column":400}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":111,"column":17},"generated":{"line":1,"column":402}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":114,"column":4},"generated":{"line":1,"column":419}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":114,"column":11},"generated":{"line":1,"column":421}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":114,"column":21},"generated":{"line":1,"column":431}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":116,"column":9},"generated":{"line":1,"column":434}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":116,"column":20},"generated":{"line":1,"column":436}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":117,"column":6},"generated":{"line":1,"column":445}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":117,"column":20},"generated":{"line":1,"column":447}},{"source":"../../../../src/internal/operators/refCount.ts","name":null,"original":{"line":117,"column":56},"generated":{"line":1,"column":449}}],"sources":{"../../../../src/internal/operators/refCount.ts":"import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @return A function that returns an Observable that automates the connection\n * to ConnectableObservable.\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n * @deprecated Replaced with the {@link share} operator. How `share` is used\n * will depend on the connectable observable you created just prior to the\n * `refCount` operator.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let connection: Subscription | null = null;\n\n    (source as any)._refCount++;\n\n    const refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\n        connection = null;\n        return;\n      }\n\n      ///\n      // Compare the local RefCountSubscriber's connection Subscription to the\n      // connection Subscription on the shared ConnectableObservable. In cases\n      // where the ConnectableObservable source synchronously emits values, and\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n      // execution continues to here before the RefCountOperator has a chance to\n      // supply the RefCountSubscriber with the shared connection Subscription.\n      // For example:\n      // ```\n      // range(0, 10).pipe(\n      //   publish(),\n      //   refCount(),\n      //   take(5),\n      // )\n      // .subscribe();\n      // ```\n      // In order to account for this case, RefCountSubscriber should only dispose\n      // the ConnectableObservable's shared connection Subscription if the\n      // connection Subscription exists, *and* either:\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\n      //      Subscription yet, or,\n      //   b. RefCountSubscriber's connection Subscription reference is identical\n      //      to the shared connection Subscription\n      ///\n\n      const sharedConnection = (source as any)._connection;\n      const conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = (source as ConnectableObservable<T>).connect();\n    }\n  });\n}\n"},"lineCount":null}},"error":null,"hash":"5c40115e10951e80ef05ca6988e53a81","cacheData":{"env":{}}}