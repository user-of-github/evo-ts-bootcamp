{"version":3,"sources":["lifeStore/lifeState.ts","components/header.tsx","components/configuration.tsx","components/canvas.tsx","components/app.tsx","index.tsx","components/configuration.module.css","components/header.module.css","components/canvas.module.css","components/app.module.css"],"names":["LifeCanvasState","field","Array","fieldSideSize","renderGrid","renderCanvasFunction","inProcess","wasEvolution","timingDelay","timerID","NaN","this","DEFAULT_FIELD_SIDE_SIZE","DEFAULT_LATENCY","makeEmptyArray","makeAutoObservable","deep","newSize","MINIMUM_SIDE_SIZE","MAXIMUM_SIDE_SIZE","stopEvolution","newLatency","MINIMAL_LATENCY","MAXIMUM_LATENCY","runEvolutionRecursive","window","clearTimeout","func","array","length","row","newRow","col","push","exploredRow","exploredCol","response","rowDelta","colDelta","y","x","newStep","numberOfNeighbours","countNumberOfNeighbours","checkIfFieldChanged","setTimeout","nextStepOfEvolution","newField","Header","className","Style","header","header__mainTitles","header__title","header__subtitle","header__subsubtitle","INPUT_SIZE_ID","INPUT_LATENCY_ID","INPUT_GRID_ID","Configuration","observer","props","configurationContainer","configurationBlock","configurationSizes","inputGroup","htmlFor","inputGroupLabel","min","max","type","id","defaultValue","data","getFieldSize","inputGroupInput","onChange","inputValue","document","getElementById","value","toString","trim","changeSize","Number","parseInt","inputSizeChanged","step","disabled","getInProgressState","checked","getGridDrawingFlag","inputGroupCheckbox","changeGridDrawingFlag","configurationLatency","getLatency","changeLatency","inputLatencyChanged","button","onClick","runEvolution","state","getWasEvolutionOrNot","CANVAS_SIDE_SIZE","CANVAS_DEAD_CELL_COLOR","Canvas","canvasRef","useRef","contextRef","smallRectRef","renderCanvas","current","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","drawGrid","useEffect","canvas","width","height","style","getContext","registerRenderingFunction","canvasContainer","ref","event","smallRectSize","rect","getBoundingClientRect","clientX","left","clientY","top","Math","floor","canvasClicked","main","App","container","applicationContainer","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.eaf7717c.chunk.js","sourcesContent":["import {makeAutoObservable} from 'mobx'\r\n\r\nexport class LifeCanvasState {\r\n    private static readonly DEFAULT_FIELD_SIDE_SIZE: number = 20\r\n    public static readonly MAXIMUM_SIDE_SIZE: number = 40\r\n    public static readonly MINIMUM_SIDE_SIZE: number = 5\r\n\r\n    private static readonly DEFAULT_LATENCY: number = 500\r\n    public static readonly MINIMAL_LATENCY: number = 10\r\n    public static readonly MAXIMUM_LATENCY: number = 1000\r\n\r\n    public field: Array<Array<boolean>> = new Array<Array<boolean>>()\r\n    private fieldSideSize: number\r\n    private renderGrid: boolean = true\r\n    private renderCanvasFunction: () => void\r\n    private inProcess: boolean = false\r\n    private wasEvolution: boolean = false\r\n    private timingDelay: number\r\n    private timerID: number = NaN\r\n\r\n    public constructor() {\r\n        this.fieldSideSize = LifeCanvasState.DEFAULT_FIELD_SIDE_SIZE\r\n        this.timingDelay = LifeCanvasState.DEFAULT_LATENCY\r\n\r\n        this.makeEmptyArray(this.field)\r\n\r\n        this.renderCanvasFunction = () => {\r\n        }\r\n        makeAutoObservable(this, {}, {deep: true})\r\n    }\r\n\r\n    public changeSize(newSize: number): void {\r\n        if (newSize >= LifeCanvasState.MINIMUM_SIDE_SIZE && newSize <= LifeCanvasState.MAXIMUM_SIDE_SIZE)\r\n            this.fieldSideSize = newSize\r\n        else\r\n            return\r\n\r\n        this.makeEmptyArray(this.field)\r\n        this.renderCanvasFunction()\r\n        this.inProcess && this.stopEvolution()\r\n    }\r\n\r\n    public changeLatency(newLatency: number): void {\r\n        if (newLatency >= LifeCanvasState.MINIMAL_LATENCY && newLatency <= LifeCanvasState.MAXIMUM_LATENCY)\r\n            this.timingDelay = newLatency\r\n    }\r\n\r\n    public runEvolution(): void {\r\n        this.inProcess = true\r\n        this.wasEvolution = true\r\n        this.runEvolutionRecursive()\r\n    }\r\n\r\n    public stopEvolution(): void {\r\n        this.inProcess = false\r\n        window.clearTimeout(this.timerID)\r\n    }\r\n\r\n    public getFieldSize(): number {\r\n        return this.fieldSideSize\r\n    }\r\n\r\n    public getLatency(): number {\r\n        return this.timingDelay\r\n    }\r\n\r\n    public registerRenderingFunction(func: () => void): void {\r\n        this.renderCanvasFunction = func\r\n    }\r\n\r\n    public changeGridDrawingFlag(): void {\r\n        this.renderGrid = !this.renderGrid\r\n        this.renderCanvasFunction()\r\n    }\r\n\r\n    public getGridDrawingFlag(): boolean {\r\n        return this.renderGrid\r\n    }\r\n\r\n    public getWasEvolutionOrNot(): boolean {\r\n        return this.wasEvolution\r\n    }\r\n\r\n    public getInProgressState(): boolean {\r\n        return this.inProcess\r\n    }\r\n\r\n    private makeEmptyArray(array: Array<Array<boolean>>): void {\r\n        array.length = 0\r\n        for (let row: number = 0; row < this.fieldSideSize; ++row) {\r\n            const newRow: Array<boolean> = Array<boolean>(this.fieldSideSize);\r\n            for (let col: number = 0; col < this.fieldSideSize; ++col)\r\n                newRow[col] = false\r\n\r\n            array.push(newRow)\r\n        }\r\n    }\r\n\r\n    private countNumberOfNeighbours(exploredRow: number, exploredCol: number, field: Array<Array<boolean>>): number {\r\n        let response: number = 0\r\n        for (let rowDelta: number = -1; rowDelta <= 1; ++rowDelta) {\r\n            for (let colDelta: number = -1; colDelta <= 1; ++colDelta) {\r\n                const y: number = exploredRow + rowDelta\r\n                const x: number = exploredCol + colDelta\r\n\r\n                if (y === exploredRow && x === exploredCol)\r\n                    continue\r\n\r\n                response += (x < this.fieldSideSize && x >= 0 && y >= 0 && y < this.fieldSideSize)\r\n                    ? (field[y][x] ? 1 : 0) : 0\r\n            }\r\n        }\r\n        return response\r\n    }\r\n\r\n    private nextStepOfEvolution(): void {\r\n        const newStep: Array<Array<boolean>> = Array<Array<boolean>>()\r\n        this.makeEmptyArray(newStep)\r\n        for (let row: number = 0; row < this.fieldSideSize; ++row) {\r\n            for (let col: number = 0; col < this.fieldSideSize; ++col) {\r\n                const numberOfNeighbours: number = this.countNumberOfNeighbours(row, col, this.field)\r\n\r\n                if (!this.field[row][col])  // currently dead\r\n                    newStep[row][col] = (numberOfNeighbours === 3)\r\n                else  // currently alive\r\n                    switch (true) {\r\n                        case (numberOfNeighbours < 2):\r\n                            newStep[row][col] = false\r\n                            break\r\n                        case (numberOfNeighbours === 2 || numberOfNeighbours === 3):\r\n                            newStep[row][col] = true\r\n                            break\r\n                        default:\r\n                            newStep[row][col] = false\r\n                            break\r\n                    }\r\n            }\r\n        }\r\n\r\n        if (this.checkIfFieldChanged(newStep)) {\r\n            this.wasEvolution = true\r\n            this.field = newStep\r\n        } else {\r\n            this.wasEvolution = false\r\n        }\r\n    }\r\n\r\n\r\n    private runEvolutionRecursive(): void {\r\n        this.timerID = window.setTimeout(() => {\r\n            this.nextStepOfEvolution()\r\n            this.renderCanvasFunction()\r\n            this.runEvolutionRecursive()\r\n        }, this.timingDelay)\r\n    }\r\n\r\n\r\n    private checkIfFieldChanged(newField: Array<Array<boolean>>): boolean {\r\n        for (let row: number = 0; row < this.fieldSideSize; ++row)\r\n            for (let col: number = 0; col < this.fieldSideSize; ++col)\r\n                if (newField[row][col] !== this.field[row][col])\r\n                    return true\r\n\r\n        return false\r\n    }\r\n}","import React from 'react'\r\nimport Style from './header.module.css'\r\n\r\nexport const Header = (): JSX.Element => (\r\n    <header className={Style.header}>\r\n        <div className=\"container\">\r\n            <div className={Style.header__mainTitles}>\r\n                <h1 className={Style.header__title}>Canvas Life</h1>\r\n                <h2 className={Style.header__subtitle}>[ Homework in Bootcamp ]</h2>\r\n            </div>\r\n            <h2 className={Style.header__subsubtitle}>© Slutski Nikita</h2>\r\n        </div>\r\n    </header>\r\n)","import {observer} from 'mobx-react-lite'\r\n\r\nimport Style from './configuration.module.css'\r\nimport {LifeCanvasState} from '../lifeStore/lifeState'\r\n\r\n\r\nconst INPUT_SIZE_ID: string = 'size'\r\nconst INPUT_LATENCY_ID: string = 'latency'\r\nconst INPUT_GRID_ID: string = 'grid'\r\n\r\nconst inputSizeChanged = (data: LifeCanvasState): void => {\r\n    const inputValue: string = (document.getElementById(INPUT_SIZE_ID) as HTMLInputElement).value.toString().trim()\r\n    if (inputValue === '')\r\n        return\r\n\r\n    data.changeSize(Number.parseInt(inputValue))\r\n}\r\n\r\nconst checkboxGridChanged = (data: LifeCanvasState): void => {\r\n    data.changeGridDrawingFlag()\r\n}\r\n\r\nconst inputLatencyChanged = (data: LifeCanvasState): void => {\r\n    const inputValue: string = (document.getElementById(INPUT_LATENCY_ID) as HTMLInputElement).value.toString().trim()\r\n    if (inputValue === '')\r\n        return\r\n\r\n    data.changeLatency(Number.parseInt(inputValue))\r\n}\r\n\r\nconst buttonRunClicked = (data: LifeCanvasState): void => data.runEvolution()\r\nconst buttonStopClicked = (data: LifeCanvasState): void => data.stopEvolution()\r\n\r\n\r\nexport const Configuration = observer((props: { data: LifeCanvasState }): JSX.Element => (\r\n    <div className={Style.configurationContainer}>\r\n        <div className={Style.configurationBlock}>\r\n            <div className={Style.configurationSizes}>\r\n                <div className={Style.inputGroup}>\r\n                    <label htmlFor={INPUT_SIZE_ID} className={Style.inputGroupLabel}>Size:</label>\r\n                    <input min={LifeCanvasState.MINIMUM_SIDE_SIZE}\r\n                           max={LifeCanvasState.MAXIMUM_SIDE_SIZE}\r\n                           type=\"number\"\r\n                           id={INPUT_SIZE_ID}\r\n                           defaultValue={props.data.getFieldSize()}\r\n                           className={Style.inputGroupInput}\r\n                           onChange={() => inputSizeChanged(props.data)}\r\n                           step={1}\r\n                           disabled={props.data.getInProgressState()}/>\r\n                </div>\r\n\r\n                <div className={Style.inputGroup}>\r\n                    <label htmlFor={INPUT_GRID_ID} className={Style.inputGroupLabel}>Draw Grid:</label>\r\n                    <input min={LifeCanvasState.MINIMUM_SIDE_SIZE}\r\n                           max={LifeCanvasState.MAXIMUM_SIDE_SIZE}\r\n                           type=\"checkbox\"\r\n                           id={INPUT_GRID_ID}\r\n                           checked={props.data.getGridDrawingFlag()}\r\n                           className={Style.inputGroupCheckbox}\r\n                           onChange={() => checkboxGridChanged(props.data)}\r\n                           step={1}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className={Style.configurationBlock}>\r\n            <div className={Style.configurationLatency}>\r\n                <div className={Style.inputGroup}>\r\n                    <label htmlFor={INPUT_LATENCY_ID} className={Style.inputGroupLabel}>Latency:</label>\r\n                    <input min={LifeCanvasState.MINIMAL_LATENCY}\r\n                           max={LifeCanvasState.MAXIMUM_LATENCY}\r\n                           defaultValue={props.data.getLatency()}\r\n                           type=\"number\"\r\n                           step={1}\r\n                           id={INPUT_LATENCY_ID}\r\n                           className={Style.inputGroupInput}\r\n                           onChange={() => inputLatencyChanged(props.data)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className={Style.configurationBlock}>\r\n            <div className={Style.configurationLatency}>\r\n                <button className={Style.button}\r\n                        disabled={props.data.getInProgressState()}\r\n                        onClick={() => buttonRunClicked(props.data)}>Run\r\n                </button>\r\n                <button className={Style.button}\r\n                        disabled={!props.data.getInProgressState()}\r\n                        onClick={() => buttonStopClicked(props.data)}>Stop\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div className={Style.configurationBlock}>\r\n            <div className={Style.configurationLatency}>\r\n                <span className={Style.state}>\r\n                    {\r\n                        !props.data.getInProgressState()\r\n                            ?\r\n                            'Not launched'\r\n                            :\r\n                            props.data.getWasEvolutionOrNot()\r\n                                ? 'Launched. Evolution is continuing'\r\n                                :\r\n                                'Launched. Evolution has stopped'\r\n                    }\r\n                </span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n))","import React, {useEffect, useRef} from 'react'\r\nimport {observer} from 'mobx-react-lite'\r\n\r\nimport {LifeCanvasState} from '../lifeStore/lifeState'\r\n\r\nimport Style from './canvas.module.css'\r\n\r\n\r\nconst CANVAS_SIDE_SIZE: number = 400\r\nconst CANVAS_DEAD_CELL_COLOR: string = '#f7f1e3'\r\nconst CANVAS_ALIVE_CELL_COLOR: string = '#33d9b2'\r\n\r\nconst canvasClicked = (event: any, canvas: HTMLCanvasElement, smallRectSize: number, data: LifeCanvasState) => {\r\n    const rect: DOMRect = canvas.getBoundingClientRect()\r\n    const x: number = event.clientX - rect.left\r\n    const y: number = event.clientY - rect.top\r\n\r\n    const row: number = Math.floor(x / smallRectSize)\r\n    const col: number = Math.floor(y / smallRectSize)\r\n\r\n    data.field[row][col] = !data.field[row][col]\r\n}\r\n\r\nexport const Canvas = observer((props: { data: LifeCanvasState }): JSX.Element => {\r\n    const canvasRef: React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null)\r\n    const contextRef: React.RefObject<CanvasRenderingContext2D> = useRef<CanvasRenderingContext2D>(null)\r\n    const smallRectRef: React.RefObject<number> = useRef<number>(null)\r\n\r\n    const drawGrid = (): void => {\r\n        // noinspection JSConstantReassignment\r\n        // @ts-ignore\r\n        smallRectRef[\"current\"] = CANVAS_SIDE_SIZE / props.data.getFieldSize()\r\n\r\n        contextRef.current!.strokeStyle = 'rgba(0, 0, 0, 0.1)'\r\n        contextRef.current!.lineWidth = 0.5\r\n        contextRef.current!.beginPath()\r\n        for (let col: number = 0; col < props.data.getFieldSize(); ++col) {\r\n            contextRef.current!.moveTo(col * smallRectRef.current, 0)\r\n            contextRef.current!.lineTo(col * smallRectRef.current, CANVAS_SIDE_SIZE)\r\n        }\r\n\r\n        for (let row: number = 0; row < props.data.getFieldSize(); ++row) {\r\n            contextRef.current!.moveTo(0, row * smallRectRef.current)\r\n            contextRef.current!.lineTo(CANVAS_SIDE_SIZE, row * smallRectRef.current)\r\n        }\r\n        contextRef.current!.closePath()\r\n        contextRef.current!.stroke()\r\n    }\r\n\r\n    const renderCanvas = (): void => {\r\n        // noinspection JSConstantReassignment\r\n        // @ts-ignore\r\n        smallRectRef[\"current\"] = CANVAS_SIDE_SIZE / props.data.getFieldSize()\r\n\r\n        contextRef.current!.fillStyle = CANVAS_DEAD_CELL_COLOR\r\n        contextRef.current!.fillRect(0, 0, CANVAS_SIDE_SIZE, CANVAS_SIDE_SIZE)\r\n\r\n        for (let row: number = 0; row < props.data.getFieldSize(); ++row) {\r\n            for (let col: number = 0; col < props.data.getFieldSize(); ++col) {\r\n                props.data.field[row][col] ?\r\n                    (contextRef.current!.fillStyle = CANVAS_ALIVE_CELL_COLOR) :\r\n                    (contextRef.current!.fillStyle = CANVAS_DEAD_CELL_COLOR)\r\n\r\n                contextRef.current?.fillRect(row * smallRectRef.current, col * smallRectRef.current,\r\n                    smallRectRef.current, smallRectRef.current)\r\n            }\r\n        }\r\n        props.data.getGridDrawingFlag() && drawGrid()\r\n    }\r\n\r\n    useEffect(() => {\r\n        const canvas: HTMLCanvasElement = canvasRef.current!\r\n        canvas.width = canvas.height = CANVAS_SIDE_SIZE\r\n        canvas.style.width = canvas.style.height = `${CANVAS_SIDE_SIZE}px`\r\n\r\n        // @ts-ignore\r\n        // noinspection JSConstantReassignment\r\n        contextRef.current = canvas.getContext('2d')!\r\n        props.data.registerRenderingFunction(renderCanvas)\r\n        renderCanvas()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={Style.canvasContainer}>\r\n            <canvas ref={canvasRef}\r\n                    className={Style.canvas}\r\n                    onClick={(event): void => {\r\n                        canvasClicked(event, canvasRef.current!, smallRectRef.current!, props.data)\r\n                        renderCanvas()\r\n                    }}/>\r\n        </div>\r\n    )\r\n})","import React from 'react'\n\nimport {LifeCanvasState} from '../lifeStore/lifeState'\n\nimport {Header} from './header'\nimport {Configuration} from './configuration'\nimport {Canvas} from './canvas'\n\nimport Style from './app.module.css'\n\n\nconst main: LifeCanvasState = new LifeCanvasState()\n\nexport const App = () => (\n    <>\n        <Header/>\n        <div className={Style.container}>\n            <main className={Style.applicationContainer}>\n                <Configuration data={main}/>\n                <Canvas data={main}/>\n            </main>\n        </div>\n    </>\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport {App} from './components/app'\n\nimport './index.css'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"configurationContainer\":\"configuration_configurationContainer__WBxJX\",\"configurationBlock\":\"configuration_configurationBlock__1D4z5\",\"configurationSizes\":\"configuration_configurationSizes__2Qu23\",\"inputGroup\":\"configuration_inputGroup__1qqLo\",\"inputGroupLabel\":\"configuration_inputGroupLabel__9lP4e\",\"inputGroupInput\":\"configuration_inputGroupInput__3jJ0x\",\"inputGroupCheckbox\":\"configuration_inputGroupCheckbox__4dyAF\",\"configurationLatency\":\"configuration_configurationLatency__1NEpd\",\"button\":\"configuration_button__G_oq3\",\"state\":\"configuration_state__1RdzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2Sexe\",\"header__mainTitles\":\"header_header__mainTitles__15-GG\",\"header__title\":\"header_header__title__v4Lvn\",\"header__subtitle\":\"header_header__subtitle__6HYh_\",\"header__subsubtitle\":\"header_header__subsubtitle__3RJR0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvasContainer\":\"canvas_canvasContainer__1CVog\",\"canvas\":\"canvas_canvas__3mSI_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"applicationContainer\":\"app_applicationContainer__2F64e\",\"container\":\"app_container__8gSEb\"};"],"sourceRoot":""}