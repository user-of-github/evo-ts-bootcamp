{"id":"../node_modules/rxjs/dist/esm5/internal/observable/merge.js","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\observable\\merge.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../operators/mergeAll","loc":{"line":1,"column":25},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js"},{"name":"./fromArray","loc":{"line":2,"column":34},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\fromArray.js"},{"name":"./from","loc":{"line":3,"column":26},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\from.js"},{"name":"./empty","loc":{"line":4,"column":22},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\empty.js"},{"name":"../util/args","loc":{"line":5,"column":40},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\merge.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\args.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.merge = merge;\n\nvar _mergeAll = require(\"../operators/mergeAll\");\n\nvar _fromArray = require(\"./fromArray\");\n\nvar _from = require(\"./from\");\n\nvar _empty = require(\"./empty\");\n\nvar _args = require(\"../util/args\");\n\nfunction merge() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = (0, _args.popScheduler)(args);\n  var concurrent = (0, _args.popNumber)(args, Infinity);\n  var sources = args;\n  return !sources.length ? _empty.EMPTY : sources.length === 1 ? (0, _from.innerFrom)(sources[0]) : (0, _mergeAll.mergeAll)(concurrent)((0, _fromArray.internalFromArray)(sources, scheduler));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":18,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":16},"generated":{"line":18,"column":9}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":6},"generated":{"line":18,"column":14}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":21},"generated":{"line":18,"column":17}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":19,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":19,"column":6}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":19,"column":10}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":19,"column":13}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":19,"column":15}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":7}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":11}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":13}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":16}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":19}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":21}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":24}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":33}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":34}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":42}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":21,"column":44}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":84},"generated":{"line":21,"column":48}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":4}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":8}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":9}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":11}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":12}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":15}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":24}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":25}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":27}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":87,"column":22},"generated":{"line":22,"column":28}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":25,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":8},"generated":{"line":25,"column":6}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":17},"generated":{"line":25,"column":15}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":20},"generated":{"line":25,"column":18}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":33},"generated":{"line":25,"column":42}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":20},"generated":{"line":25,"column":46}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":25,"column":47}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":2},"generated":{"line":26,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":8},"generated":{"line":26,"column":6}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":18},"generated":{"line":26,"column":16}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":21},"generated":{"line":26,"column":19}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":31},"generated":{"line":26,"column":40}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":21},"generated":{"line":26,"column":44}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":37},"generated":{"line":26,"column":46}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":21},"generated":{"line":26,"column":54}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":89,"column":2},"generated":{"line":26,"column":55}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":27,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":8},"generated":{"line":27,"column":6}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":15},"generated":{"line":27,"column":13}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":18},"generated":{"line":27,"column":16}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":90,"column":2},"generated":{"line":27,"column":20}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":28,"column":0}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":9},"generated":{"line":28,"column":9}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":10},"generated":{"line":28,"column":10}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":17},"generated":{"line":28,"column":17}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":18},"generated":{"line":28,"column":18}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":9},"generated":{"line":28,"column":24}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":93,"column":6},"generated":{"line":28,"column":27}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":9},"generated":{"line":28,"column":39}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":6},"generated":{"line":28,"column":42}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":13},"generated":{"line":28,"column":49}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":14},"generated":{"line":28,"column":50}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":6},"generated":{"line":28,"column":56}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":25},"generated":{"line":28,"column":61}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":6},"generated":{"line":28,"column":62}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":28,"column":65}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":16},"generated":{"line":28,"column":86}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":23},"generated":{"line":28,"column":93}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":24},"generated":{"line":28,"column":94}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":23},"generated":{"line":28,"column":95}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":96,"column":6},"generated":{"line":28,"column":96}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":94,"column":6},"generated":{"line":28,"column":97}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":28,"column":100}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":15},"generated":{"line":28,"column":124}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":28,"column":134}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":27},"generated":{"line":28,"column":136}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":45},"generated":{"line":28,"column":170}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":27},"generated":{"line":28,"column":177}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":54},"generated":{"line":28,"column":179}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":27},"generated":{"line":28,"column":188}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":98,"column":6},"generated":{"line":28,"column":189}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":91,"column":2},"generated":{"line":28,"column":190}},{"source":"../../../../src/internal/observable/merge.ts","name":null,"original":{"line":99,"column":1},"generated":{"line":29,"column":0}}],"sources":{"../../../../src/internal/observable/merge.ts":"import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { internalFromArray } from './fromArray';\nimport { innerFrom } from './from';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```ts\n * import { merge, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(internalFromArray(sources, scheduler));\n}\n"},"lineCount":null}},"error":null,"hash":"4e8449dfc0689207b171311905400c8a","cacheData":{"env":{}}}