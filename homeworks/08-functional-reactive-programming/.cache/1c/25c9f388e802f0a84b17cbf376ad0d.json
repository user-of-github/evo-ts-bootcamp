{"id":"wu76","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\throwError.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\observable\\throwError.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../Observable","loc":{"line":1,"column":27},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\throwError.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\Observable.js"},{"name":"../util/isFunction","loc":{"line":2,"column":27},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\throwError.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\isFunction.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.throwError=n;var r=require(\"../Observable\"),e=require(\"../util/isFunction\");function n(n,t){var u=(0,e.isFunction)(n)?n:function(){return n},i=function(r){return r.error(u())};return new r.Observable(t?function(r){return t.schedule(i,0,r)}:i)}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":127,"column":1},"generated":{"line":1,"column":87}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":95}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":103}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":120}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":122}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":130}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":123,"column":6},"generated":{"line":1,"column":152}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":123,"column":16},"generated":{"line":1,"column":161}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":123,"column":27},"generated":{"line":1,"column":163}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":123,"column":53},"generated":{"line":1,"column":165}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":8},"generated":{"line":1,"column":168}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":8},"generated":{"line":1,"column":172}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":23},"generated":{"line":1,"column":175}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":34},"generated":{"line":1,"column":177}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":34},"generated":{"line":1,"column":179}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":34},"generated":{"line":1,"column":191}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":57},"generated":{"line":1,"column":194}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":79},"generated":{"line":1,"column":196}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":85},"generated":{"line":1,"column":207}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":124,"column":85},"generated":{"line":1,"column":214}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":8},"generated":{"line":1,"column":217}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":15},"generated":{"line":1,"column":219}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":16},"generated":{"line":1,"column":228}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":50},"generated":{"line":1,"column":231}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":50},"generated":{"line":1,"column":238}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":61},"generated":{"line":1,"column":240}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":125,"column":67},"generated":{"line":1,"column":246}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":9},"generated":{"line":1,"column":252}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":9},"generated":{"line":1,"column":259}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":13},"generated":{"line":1,"column":263}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":9},"generated":{"line":1,"column":265}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":24},"generated":{"line":1,"column":276}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":36},"generated":{"line":1,"column":278}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":37},"generated":{"line":1,"column":287}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":52},"generated":{"line":1,"column":290}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":52},"generated":{"line":1,"column":297}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":62},"generated":{"line":1,"column":299}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":71},"generated":{"line":1,"column":308}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":84},"generated":{"line":1,"column":310}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":87},"generated":{"line":1,"column":312}},{"source":"../../../../src/internal/observable/throwError.ts","name":null,"original":{"line":126,"column":101},"generated":{"line":1,"column":316}}],"sources":{"../../../../src/internal/observable/throwError.ts":"import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it.\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *    const error: any = new Error(`This is error number ${++errorCount}`);\n *    error.timestamp = Date.now();\n *    return error;\n * });\n *\n * errorWithTimesptamp$.subscribe({\n *    error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimesptamp$.subscribe({\n *    error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message each subscription;\n * ```\n *\n * ## Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary:\n *\n * ```ts\n * import { throwError, timer, of } from 'rxjs';\n * import { concatMap } from 'rxjs/operators';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *    concatMap(ms => {\n *      if (ms < 10000) {\n *        return timer(ms);\n *      } else {\n *        // This is probably overkill.\n *        return throwError(() => new Error(`Invalid time ${ms}`));\n *      }\n *    })\n * )\n * .subscribe({\n *    next: console.log,\n *    error: console.error\n * });\n * ```\n *\n * You can just throw the error instead:\n *\n * ```ts\n * import { throwError, timer, of } from 'rxjs';\n * import { concatMap } from 'rxjs/operators';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *    concatMap(ms => {\n *      if (ms < 10000) {\n *        return timer(ms);\n *      } else {\n *        // Cleaner and easier to read for most folks.\n *        throw new Error(`Invalid time ${ms}`);\n *      }\n *    })\n * )\n * .subscribe({\n *    next: console.log,\n *    error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n"},"lineCount":null}},"error":null,"hash":"67ca39becc1d67a8fb2047da9a786a93","cacheData":{"env":{}}}