{"id":"bQiY","dependencies":[{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js.map","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\src\\internal\\observable\\forkJoin.ts","includedInParent":true,"mtime":1621859693337},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\package.json","includedInParent":true,"mtime":1621953013143},{"name":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1621859693337},{"name":"../Observable","loc":{"line":1,"column":27},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\Observable.js"},{"name":"../util/argsArgArrayOrObject","loc":{"line":2,"column":37},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\argsArgArrayOrObject.js"},{"name":"./from","loc":{"line":3,"column":26},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\from.js"},{"name":"../util/args","loc":{"line":4,"column":34},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\args.js"},{"name":"../operators/OperatorSubscriber","loc":{"line":5,"column":35},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\OperatorSubscriber.js"},{"name":"../util/mapOneOrManyArgs","loc":{"line":6,"column":33},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\mapOneOrManyArgs.js"},{"name":"../util/createObject","loc":{"line":7,"column":29},"parent":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\forkJoin.js","resolved":"C:\\Users\\User\\Desktop\\Other\\HomeWork\\Bootcamp\\homeworks\\08-functional-reactive-programming\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\createObject.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.forkJoin=o;var r=require(\"../Observable\"),e=require(\"../util/argsArgArrayOrObject\"),t=require(\"./from\"),a=require(\"../util/args\"),i=require(\"../operators/OperatorSubscriber\"),n=require(\"../util/mapOneOrManyArgs\"),u=require(\"../util/createObject\");function o(){for(var o=[],s=0;s<arguments.length;s++)o[s]=arguments[s];var c=(0,a.popResultSelector)(o),b=(0,e.argsArgArrayOrObject)(o),l=b.args,O=b.keys,p=new r.Observable(function(r){var e=l.length;if(e)for(var a=new Array(e),n=e,o=e,s=function(e){var s=!1;(0,t.innerFrom)(l[e]).subscribe(new i.OperatorSubscriber(r,function(r){s||(s=!0,o--),a[e]=r},function(){--n&&s||(o||r.next(O?(0,u.createObject)(O,a):a),r.complete())}))},c=0;c<e;c++)s(c);else r.complete()});return c?p.pipe((0,n.mapOneOrManyArgs)(c)):p}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":182,"column":1},"generated":{"line":1,"column":85}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":93}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":101}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":118}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":120}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":128}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":160}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":162}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":1,"column":170}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":180}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":182}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":190}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":206}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":208}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":216}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":251}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":253}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":1,"column":261}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":289}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":291}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":1,"column":299}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":6},"generated":{"line":1,"column":323}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":16},"generated":{"line":1,"column":332}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":336}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":340}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":344}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":346}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":349}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":351}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":353}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":355}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":365}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":372}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":376}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":378}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":381}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":145,"column":25},"generated":{"line":1,"column":391}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":146,"column":8},"generated":{"line":1,"column":394}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":146,"column":8},"generated":{"line":1,"column":398}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":146,"column":25},"generated":{"line":1,"column":401}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":146,"column":43},"generated":{"line":1,"column":403}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":146,"column":43},"generated":{"line":1,"column":405}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":146,"column":43},"generated":{"line":1,"column":424}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":8},"generated":{"line":1,"column":427}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":34},"generated":{"line":1,"column":430}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":55},"generated":{"line":1,"column":432}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":55},"generated":{"line":1,"column":434}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":55},"generated":{"line":1,"column":456}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":16},"generated":{"line":1,"column":459}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":23},"generated":{"line":1,"column":461}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":23},"generated":{"line":1,"column":463}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":25},"generated":{"line":1,"column":468}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":29},"generated":{"line":1,"column":470}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":147,"column":29},"generated":{"line":1,"column":472}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":8},"generated":{"line":1,"column":477}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":17},"generated":{"line":1,"column":479}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":21},"generated":{"line":1,"column":483}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":17},"generated":{"line":1,"column":485}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":32},"generated":{"line":1,"column":496}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":148,"column":33},"generated":{"line":1,"column":505}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":12},"generated":{"line":1,"column":508}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":12},"generated":{"line":1,"column":512}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":23},"generated":{"line":1,"column":514}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":149,"column":30},"generated":{"line":1,"column":516}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":8},"generated":{"line":1,"column":523}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":150,"column":9},"generated":{"line":1,"column":526}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":9},"generated":{"line":1,"column":528}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":154,"column":10},"generated":{"line":1,"column":532}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":154,"column":10},"generated":{"line":1,"column":536}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":154,"column":19},"generated":{"line":1,"column":538}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":154,"column":23},"generated":{"line":1,"column":542}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":154,"column":29},"generated":{"line":1,"column":548}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":155,"column":8},"generated":{"line":1,"column":551}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":155,"column":31},"generated":{"line":1,"column":553}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":8},"generated":{"line":1,"column":555}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":156,"column":29},"generated":{"line":1,"column":557}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":13},"generated":{"line":1,"column":559}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":13},"generated":{"line":1,"column":561}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":13},"generated":{"line":1,"column":570}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":158,"column":10},"generated":{"line":1,"column":573}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":158,"column":10},"generated":{"line":1,"column":577}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":158,"column":21},"generated":{"line":1,"column":580}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":16},"generated":{"line":1,"column":583}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":16},"generated":{"line":1,"column":585}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":16},"generated":{"line":1,"column":587}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":16},"generated":{"line":1,"column":598}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":24},"generated":{"line":1,"column":600}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":159,"column":38},"generated":{"line":1,"column":604}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":160,"column":8},"generated":{"line":1,"column":614}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":160,"column":12},"generated":{"line":1,"column":618}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":160,"column":8},"generated":{"line":1,"column":620}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":161,"column":10},"generated":{"line":1,"column":639}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":162,"column":10},"generated":{"line":1,"column":641}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":162,"column":11},"generated":{"line":1,"column":650}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":163,"column":17},"generated":{"line":1,"column":653}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":164,"column":14},"generated":{"line":1,"column":657}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":164,"column":25},"generated":{"line":1,"column":660}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":165,"column":14},"generated":{"line":1,"column":662}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":167,"column":12},"generated":{"line":1,"column":667}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":167,"column":19},"generated":{"line":1,"column":669}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":167,"column":34},"generated":{"line":1,"column":672}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":169,"column":10},"generated":{"line":1,"column":675}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":170,"column":19},"generated":{"line":1,"column":688}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":170,"column":44},"generated":{"line":1,"column":691}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":171,"column":19},"generated":{"line":1,"column":695}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":16},"generated":{"line":1,"column":698}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":27},"generated":{"line":1,"column":700}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":32},"generated":{"line":1,"column":705}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":39},"generated":{"line":1,"column":708}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":52},"generated":{"line":1,"column":710}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":52},"generated":{"line":1,"column":712}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":52},"generated":{"line":1,"column":726}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":58},"generated":{"line":1,"column":728}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":172,"column":68},"generated":{"line":1,"column":731}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":174,"column":14},"generated":{"line":1,"column":734}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":174,"column":25},"generated":{"line":1,"column":736}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":13},"generated":{"line":1,"column":752}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":27},"generated":{"line":1,"column":754}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":30},"generated":{"line":1,"column":756}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":44},"generated":{"line":1,"column":758}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":52},"generated":{"line":1,"column":760}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":13},"generated":{"line":1,"column":764}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":157,"column":13},"generated":{"line":1,"column":766}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":151,"column":6},"generated":{"line":1,"column":774}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":151,"column":17},"generated":{"line":1,"column":776}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":9},"generated":{"line":1,"column":789}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":9},"generated":{"line":1,"column":796}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":26},"generated":{"line":1,"column":798}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":33},"generated":{"line":1,"column":800}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":38},"generated":{"line":1,"column":806}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":55},"generated":{"line":1,"column":808}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":55},"generated":{"line":1,"column":810}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":55},"generated":{"line":1,"column":828}},{"source":"../../../../src/internal/observable/forkJoin.ts","name":null,"original":{"line":181,"column":74},"generated":{"line":1,"column":832}}],"sources":{"../../../../src/internal/observable/forkJoin.ts":"import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInputTuple, ObservableInput } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './from';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nimport { AnyCatcher } from '../AnyCatcher';\n\n// forkJoin(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function forkJoin<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// forkJoin(null | undefined)\nexport function forkJoin(scheduler: null | undefined): Observable<never>;\n\n// forkJoin([a, b, c])\nexport function forkJoin(sources: readonly []): Observable<never>;\nexport function forkJoin<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\nexport function forkJoin<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n\n// forkJoin(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n// forkJoin({a, b, c})\nexport function forkJoin(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function forkJoin<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted;\n * complete immediately if an empty array is passed.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided (e.g. an empty array is passed),\n * then the resulting stream will complete immediately.\n *\n * `forkJoin` will wait for all passed observables to emit and complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, then the resulting\n * array will have `n` values, where the first value is the last one emitted by the first observable,\n * second value is the last one emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, then the resulting\n * objects will have the same keys as the dictionary passed, with their last values they have emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of the lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for the resulting array to have the same length as the number of input observables, whenever any of\n * the given observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete either,\n * unless at any point some other observable completes without emitting a value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all given observables\n * have to emit something at least once and complete.\n *\n * If any given observable errors at some point, `forkJoin` will error as well and immediately unsubscribe\n * from the other observables.\n *\n * Optionally `forkJoin` accepts a `resultSelector` function, that will be called with values which normally\n * would land in the emitted array. Whatever is returned by the `resultSelector`, will appear in the output\n * observable instead. This means that the default `resultSelector` can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that the `resultSelector` will be called only\n * when `forkJoin` is supposed to emit a result.\n *\n * ## Examples\n *\n * ### Use forkJoin with a dictionary of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000),\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with an array of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000),\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} args Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(...args: any[]): Observable<any> {\n  const resultSelector = popResultSelector(args);\n  const { args: sources, keys } = argsArgArrayOrObject(args);\n  const result = new Observable((subscriber) => {\n    const { length } = sources;\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(length);\n    let remainingCompletions = length;\n    let remainingEmissions = length;\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      let hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(\n        new OperatorSubscriber(\n          subscriber,\n          (value) => {\n            if (!hasValue) {\n              hasValue = true;\n              remainingEmissions--;\n            }\n            values[sourceIndex] = value;\n          },\n          () => {\n            if (!--remainingCompletions || !hasValue) {\n              if (!remainingEmissions) {\n                subscriber.next(keys ? createObject(keys, values) : values);\n              }\n              subscriber.complete();\n            }\n          }\n        )\n      );\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n"},"lineCount":null}},"error":null,"hash":"b5406231824df7a8967eaecb7dff5351","cacheData":{"env":{}}}