{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["\r\nconst SCREEN_PADDING: number = 20\r\nconst NUMBER_OF_BLOCKS: number = 10\r\nconst MAXIMUM_WINDOWS_IN_LINE: number = 2\r\n\r\nenum BlockType {\r\n    CAT = 'CAT',\r\n    WALL = 'WALL',\r\n    WINDOW = 'WINDOW'\r\n}\r\n\r\n\r\nconst field: BlockType[][] = []\r\n\r\nconst generateNewField = (): void => {\r\n    for (let row: number = 0; row < NUMBER_OF_BLOCKS; ++row) {\r\n        const newCol: BlockType[] = Array<BlockType>(10)\r\n        const howManyGenerate: number = Math.round(MAXIMUM_WINDOWS_IN_LINE * Math.random())\r\n\r\n        const alreadyOccupied: Set<number> = new Set<number>()\r\n\r\n        let counter = 0\r\n        while (counter < howManyGenerate) {\r\n            const newVariant: number = Math.floor(NUMBER_OF_BLOCKS * Math.random())\r\n\r\n            if (alreadyOccupied.has(newVariant))\r\n                continue\r\n\r\n            alreadyOccupied.add(newVariant)\r\n            ++counter\r\n        }\r\n\r\n        for (let col: number = 0; col < NUMBER_OF_BLOCKS; ++col)\r\n            newCol[col] = BlockType.WALL\r\n\r\n\r\n        alreadyOccupied.forEach((item: number) => newCol[item] = BlockType.WINDOW)\r\n\r\n        field.push(newCol)\r\n    }\r\n}\r\n\r\nconst resizeApp = (app: HTMLDivElement): void => {\r\n    const windowWidth: number = document.body.clientWidth\r\n    const windowHeight: number = document.body.clientHeight\r\n\r\n    const appSideLength = Math.min(windowWidth, windowHeight) - SCREEN_PADDING * 2\r\n\r\n    app.style.width = app.style.height = appSideLength.toString() + 'px'\r\n}\r\n\r\nconst firstRenderApp = (app: HTMLDivElement): void => {\r\n    for (let row: number = 0; row < NUMBER_OF_BLOCKS; ++row) {\r\n        for (let col: number = 0; col < NUMBER_OF_BLOCKS; ++col) {\r\n            const newBlock = `<div class=\"app__block ${field[row][col] === BlockType.WINDOW ? 'app__block-window' :\r\n                'app__block-wall'}\" data-row=\"${row}\" data-col=\"${col}\"></div>`\r\n            app.innerHTML += newBlock\r\n        }\r\n    }\r\n}\r\n\r\nconst runApplication = (): void => {\r\n    generateNewField()\r\n\r\n    const app: HTMLDivElement = document.getElementById('app') as HTMLDivElement\r\n\r\n    resizeApp(app)\r\n\r\n    window.addEventListener('resize', () => resizeApp(app))\r\n\r\n    firstRenderApp(app)\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', runApplication)"]}