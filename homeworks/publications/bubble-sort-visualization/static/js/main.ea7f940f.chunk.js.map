{"version":3,"sources":["components/header.module.css","components/management.module.css","components/settings.module.css","components/field.module.css","components/app.module.css","components/state.module.css","components/header.tsx","components/field.tsx","components/management.tsx","components/state.tsx","components/settings.tsx","utilities/randomArray.ts","components/App.tsx","index.tsx","utilities/sort.ts"],"names":["module","exports","Header","className","style","header","header__mainTitles","header__title","header__subtitle","header__subsubtitle","RECTANGLE_WIDTH","Reactangles","numbers","fullHeight","xPosition","map","num","x","y","width","height","rx","ry","Field","arraySize","FULL_SVG_HEIGHT","maximumElement","FULL_SVG_WIDTH","document","documentElement","clientWidth","visualizationWrapper","visualization","Management","solved","inProcess","change","run","management","btn","onClick","disabled","CurrentState","state","Settings","changeLatency","changeArraySize","maxDelay","minDelay","maxElCount","minElCount","settingsBar","input","type","step","min","max","placeholder","onChange","GenerateRandomArray","numberOfElements","maxElement","response","counter","push","Math","floor","random","App","params","timerID_","arrayLength_","maximumArrayElement_","latency_","randomizerFunction_","sorter_","minElementsCount","maxElementsCount","event","window","clearInterval","setState","setInterval","wasSwapped","success","setLatency","newValue","target","value","toString","trim","alert","newValueNumber","Number","parseInt","setArraySize","NaN","arrayLength","maximumArrayElement","randomizer","latency","sorter","this","main","container","React","Component","ReactDOM","render","StrictMode","nums","counter2","numbersArray","indexFirst","indexSecond","length","console","dir","getElementById"],"mappings":"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","file":"static/js/main.ea7f940f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2aiHw\",\"header__mainTitles\":\"header_header__mainTitles__NFm59\",\"header__title\":\"header_header__title__32OVy\",\"header__subtitle\":\"header_header__subtitle__OrrBf\",\"header__subsubtitle\":\"header_header__subsubtitle__1a1D9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"management\":\"management_management__3tqOu\",\"btn\":\"management_btn__3wuRS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBar\":\"settings_settingsBar__2Eysc\",\"input\":\"settings_input__3tkgv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"visualization\":\"field_visualization__163Q2\",\"visualizationWrapper\":\"field_visualizationWrapper__3nDzA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2b8FN\",\"main\":\"app_main__2Ebeq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"state\":\"state_state__3k9I-\"};","import React from 'react'\r\nimport style from './header.module.css'\r\n\r\nexport const Header: React.FC = () => (\r\n    <header className={style.header}>\r\n        <div className=\"container\">\r\n            <div className={style.header__mainTitles}>\r\n                <h1 className={style.header__title}>Sort Visualization</h1>\r\n                <h2 className={style.header__subtitle}>[ First homework in Bootcamp ]</h2>\r\n            </div>\r\n            <h2 className={style.header__subsubtitle}>Â© Slutski Nikita</h2>\r\n        </div>\r\n    </header>\r\n)\r\n","import React from 'react'\r\nimport style from './field.module.css'\r\n\r\nconst ONE_POINT_OF_HEIGHT: number = 10,\r\n    ROUNDING_UP: number = 7,\r\n    MARGIN_RIGHT: number = 2,\r\n    PADDING_VERTICAL: number = 5\r\n\r\nlet RECTANGLE_WIDTH: number = 20\r\nconst MAX_RECTANGLE_WIDTH: number = 50\r\n\r\nconst Reactangles = (numbers: number[], fullHeight: number): JSX.Element[] => {\r\n    let xPosition: number = 1\r\n\r\n    return numbers.map((num) => {\r\n        xPosition += (RECTANGLE_WIDTH + MARGIN_RIGHT)\r\n        return (\r\n            <rect x={xPosition - RECTANGLE_WIDTH}\r\n                  y={fullHeight - ONE_POINT_OF_HEIGHT * num - PADDING_VERTICAL}\r\n                  width={RECTANGLE_WIDTH}\r\n                  height={ONE_POINT_OF_HEIGHT * num}\r\n                  rx={ROUNDING_UP}\r\n                  ry={ROUNDING_UP}/>\r\n        )\r\n    })\r\n}\r\n\r\ntype Params = {\r\n    numbers: number[],\r\n    arraySize: number,\r\n    maximumElement: number\r\n}\r\n\r\nexport const Field = ({numbers, arraySize, maximumElement}: Params): JSX.Element => {\r\n    let FULL_SVG_HEIGHT: number = (maximumElement * ONE_POINT_OF_HEIGHT) + (2 * PADDING_VERTICAL),\r\n        FULL_SVG_WIDTH: number = document.documentElement.clientWidth * 0.5\r\n\r\n    RECTANGLE_WIDTH = FULL_SVG_WIDTH / arraySize - MARGIN_RIGHT\r\n    if (RECTANGLE_WIDTH > MAX_RECTANGLE_WIDTH) {\r\n        RECTANGLE_WIDTH = MAX_RECTANGLE_WIDTH\r\n        FULL_SVG_WIDTH = (RECTANGLE_WIDTH + MARGIN_RIGHT) * arraySize\r\n    }\r\n\r\n    return (\r\n        <div className={style.visualizationWrapper}>\r\n            <svg className={style.visualization}\r\n                 style={\r\n                     {\r\n                         width: FULL_SVG_WIDTH + 'px',\r\n                         height: FULL_SVG_HEIGHT + 'px'\r\n                     }\r\n                 }>\r\n                {Reactangles(numbers, FULL_SVG_HEIGHT)}\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport style from './management.module.css'\r\n\r\ntype Params = {\r\n    solved: boolean\r\n    inProcess: boolean,\r\n    change: React.MouseEventHandler<HTMLButtonElement>,\r\n    run: React.MouseEventHandler<HTMLButtonElement>,\r\n}\r\n\r\nexport const Management = ({solved, inProcess, change, run}: Params): JSX.Element => (\r\n    <div className={style.management}>\r\n        <button className={style.btn} onClick={run} disabled={solved}>{inProcess ? 'Stop' : 'Run'}</button>\r\n        <button className={style.btn} onClick={change} disabled={inProcess}>New Set</button>\r\n    </div>\r\n)\r\n","import React from 'react'\r\nimport style from './state.module.css'\r\n\r\ntype Params = {\r\n    state: boolean\r\n}\r\n\r\nexport const CurrentState = ({state}: Params): JSX.Element =>\r\n    <div className={style.state}>{state ? 'Solved' : 'Not solved'}</div>\r\n\r\n","import React from 'react'\r\nimport style from './settings.module.css'\r\n\r\n\r\ntype Params = {\r\n    solved: boolean\r\n    inProcess: boolean,\r\n    changeLatency: React.ChangeEventHandler<HTMLInputElement>,\r\n    changeArraySize: React.ChangeEventHandler<HTMLInputElement>,\r\n    maxDelay: number,\r\n    minDelay: number,\r\n    maxElCount: number,\r\n    minElCount: number\r\n}\r\n\r\nexport const Settings = ({inProcess, changeLatency, changeArraySize, maxDelay, minDelay, maxElCount, minElCount}: Params): JSX.Element => (\r\n    <div className={style.settingsBar}>\r\n        <input className={style.input} type=\"number\" step=\"100\" min={minDelay} max={maxDelay} placeholder=\"Latency\" disabled={inProcess}\r\n               onChange={changeLatency}/>\r\n        <input className={style.input} type=\"number\" step=\"1\" min={minElCount} max={maxElCount} placeholder={\"Array length\"}\r\n               disabled={inProcess} onChange={changeArraySize}/>\r\n    </div>\r\n)\r\n","export const GenerateRandomArray = (numberOfElements: number, maxElement: number): number[] => {\r\n    const response: number[] = []\r\n    for (let counter: number = 1; counter <= numberOfElements; ++counter)\r\n        response.push(Math.floor(Math.random() * maxElement) + 1)\r\n\r\n    return response\r\n}\r\n\r\n","import React from 'react'\r\nimport {Header} from './header'\r\nimport {Field} from './field'\r\nimport {Management} from './management'\r\nimport {CurrentState} from './state'\r\nimport {Settings} from './settings'\r\nimport style from './app.module.css'\r\nimport {GenerateRandomArray} from \"../utilities/randomArray\";\r\n\r\ntype Params = {\r\n    arrayLength: number,\r\n    maximumArrayElement: number,\r\n    latency: number,\r\n    randomizer: (numberOfElements: number, maximumElement: number) => number[],\r\n    sorter: (array: number[]) => SortResult\r\n}\r\n\r\ntype State = {\r\n    numbers: number[],\r\n    inProcess: boolean,\r\n    solved: boolean\r\n}\r\n\r\ntype SortResult = {\r\n    numbers: number[],\r\n    success: boolean,\r\n    wasSwapped: boolean\r\n}\r\n\r\nexport class App extends React.Component<Params, State> {\r\n    timerID_: number\r\n    arrayLength_: number\r\n    maximumArrayElement_: number\r\n    latency_: number\r\n    randomizerFunction_: (a: number, b: number) => number[]\r\n    sorter_: (array: number[]) => SortResult\r\n    readonly minDelay: number = 1\r\n    readonly maxDelay: number = 1000\r\n    readonly minElementsCount: number = 1\r\n    readonly maxElementsCount: number = 50\r\n\r\n    constructor(params: Params) {\r\n        super(params)\r\n        this.timerID_ = NaN\r\n        this.arrayLength_ = params.arrayLength\r\n        this.maximumArrayElement_ = params.maximumArrayElement\r\n        this.randomizerFunction_ = params.randomizer\r\n        this.latency_ = params.latency\r\n        this.sorter_ = params.sorter\r\n\r\n        this.state = {\r\n            numbers: this.randomizerFunction_(this.arrayLength_, this.maximumArrayElement_),\r\n            solved: false,\r\n            inProcess: false\r\n        }\r\n    }\r\n\r\n\r\n    change: React.MouseEventHandler<HTMLButtonElement> = event => {\r\n        window.clearInterval(this.timerID_)\r\n        this.setState({\r\n            numbers: this.randomizerFunction_(this.arrayLength_, this.maximumArrayElement_),\r\n            solved: false,\r\n            inProcess: false\r\n        })\r\n    }\r\n\r\n    run: React.MouseEventHandler<HTMLButtonElement> = event => {\r\n        const {numbers, inProcess} = this.state\r\n        this.setState({inProcess: !inProcess})\r\n\r\n        if (inProcess) {\r\n            window.clearInterval(this.timerID_)\r\n            return\r\n        }\r\n\r\n        this.timerID_ = window.setInterval(() => {\r\n            const response: SortResult = this.sorter_(numbers)\r\n\r\n            if (response.wasSwapped)\r\n                this.setState({numbers: response.numbers, inProcess: true, solved: response.success})\r\n\r\n            this.setState({solved: response.success})\r\n\r\n            if (this.state.solved) {\r\n                this.setState({inProcess: false})\r\n                window.clearInterval(this.timerID_)\r\n            }\r\n        }, this.latency_)\r\n    }\r\n\r\n    setLatency: React.ChangeEventHandler<HTMLInputElement> = event => {\r\n        const newValue: string = event.target.value.toString().trim()\r\n        if (newValue === '') {\r\n            window.alert(`Unacceptable value. Put value in the range [${this.minDelay} ... ${this.maxDelay}]`)\r\n            event.target.value = this.latency_.toString()\r\n            return\r\n        }\r\n\r\n        const newValueNumber: number = Number.parseInt(newValue)\r\n        if (newValueNumber < this.minDelay || newValueNumber > this.maxDelay){\r\n            window.alert(`Unacceptable value. Put value in the range [${this.minDelay} ... ${this.maxDelay}]`)\r\n            event.target.value = this.latency_.toString()\r\n            return\r\n        }\r\n\r\n\r\n        this.latency_ = newValueNumber\r\n        this.setState({solved: false, inProcess: false})\r\n        window.clearInterval(this.timerID_)\r\n    }\r\n\r\n    setArraySize: React.ChangeEventHandler<HTMLInputElement> = event => {\r\n        const newValue: string = event.target.value.toString().trim()\r\n        if (newValue === '') {\r\n            window.alert(`Unacceptable value. Put value in the range [${this.minElementsCount} ... ${this.maxElementsCount}]`)\r\n            event.target.value = this.arrayLength_.toString()\r\n            return\r\n        }\r\n\r\n        const newValueNumber: number = Number.parseInt(newValue)\r\n        if (newValueNumber < this.minElementsCount || newValueNumber > this.maxElementsCount) {\r\n            window.alert(`Unacceptable value. Put value in the range [${this.minElementsCount} ... ${this.maxElementsCount}]`)\r\n            event.target.value = this.arrayLength_.toString()\r\n            return\r\n        }\r\n\r\n        this.arrayLength_ = newValueNumber\r\n        this.setState({\r\n            numbers: GenerateRandomArray(this.arrayLength_, this.maximumArrayElement_),\r\n            solved: false,\r\n            inProcess: false\r\n        })\r\n        window.clearInterval(this.timerID_)\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID_)\r\n    }\r\n\r\n    render() {\r\n        const {numbers, solved, inProcess} = this.state\r\n\r\n        return (<>\r\n                <Header/>\r\n                <main className={style.main}>\r\n                    <div className={style.container}>\r\n                        <Field numbers={numbers}\r\n                               arraySize={this.arrayLength_}\r\n                               maximumElement={this.maximumArrayElement_}/>\r\n\r\n                        <Management inProcess={inProcess}\r\n                                    run={this.run}\r\n                                    change={this.change}\r\n                                    solved={solved}/>\r\n                        <Settings solved={solved}\r\n                                  inProcess={inProcess}\r\n                                  changeLatency={this.setLatency}\r\n                                  changeArraySize={this.setArraySize}\r\n                                  minDelay={this.minDelay}\r\n                                  maxDelay={this.maxDelay}\r\n                                  minElCount={this.minElementsCount}\r\n                                  maxElCount={this.maxElementsCount}/>\r\n\r\n                        <CurrentState state={solved}/>\r\n                    </div>\r\n                </main>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './components/App'\r\nimport {GenerateRandomArray} from './utilities/randomArray'\r\nimport {BubbleSortNumbers} from './utilities/sort'\r\n\r\nconst LATENCY: number = 200,\r\n    MAXIMUM_ARRAY_ELEMENT: number = 30,\r\n    ARRAY_LENGTH: number = 30\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n\r\n        <App arrayLength={ARRAY_LENGTH}\r\n             maximumArrayElement={MAXIMUM_ARRAY_ELEMENT}\r\n             latency={LATENCY}\r\n             randomizer={GenerateRandomArray}\r\n             sorter={BubbleSortNumbers}/>\r\n\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n","const SwapNumbers = (numbersArray: number[], indexFirst: number, indexSecond: number): void => {\r\n    numbersArray[indexFirst] += numbersArray[indexSecond]\r\n    numbersArray[indexSecond] = numbersArray[indexFirst] - numbersArray[indexSecond]\r\n    numbersArray[indexFirst] -= numbersArray[indexSecond]\r\n}\r\n\r\ntype SortResult = {\r\n    numbers: number[],\r\n    success: boolean,\r\n    wasSwapped: boolean\r\n}\r\n\r\nexport const BubbleSortNumbers = (nums: number[]): SortResult => {\r\n\r\n    let response: SortResult = {\r\n        numbers: nums,\r\n        success: false,\r\n        wasSwapped: false\r\n    }\r\n\r\n    let counter: number, counter2: number\r\n\r\n    for (counter = 0; counter < response.numbers.length - 1; ++counter)\r\n        for (counter2 = 0; counter2 < response.numbers.length - counter - 1; ++counter2) {\r\n            console.dir(response.success)\r\n            if (response.numbers[counter2] > response.numbers[counter2 + 1]) {\r\n                SwapNumbers(response.numbers, counter2, counter2 + 1)\r\n                response.wasSwapped = true\r\n                return response\r\n            }\r\n        }\r\n\r\n    response.success = true\r\n\r\n    return response\r\n}\r\n"],"sourceRoot":""}